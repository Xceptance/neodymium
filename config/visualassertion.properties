# Global flag to turn visual assertions off, nothing will be done, all code is skipped
neodymium.visualassertion.enabled=true

# Result directory for the image output, relative to the test suite
# main directory
neodymium.visualassertion.resultDirectory=results/visualassertion

## ID for the current environment that hosts the visualassertion module. 
## The ID is used in the creation of the folder structure for the results. 
## This should be used like this for now, because different environment create different screenshot which might cause an assertion to
## fail, even if the page is still valid.
neodymium.visualassertion.ID=localmachine

# The time the program waits for a page to load before it takes the screenshot
neodymium.visualassertion.waitingTime=1000

# These parameters determine the width and height of the blocks used for marking and masking. While the size of the blocks during marking 
# is purely cosmetic, for masking it causes an increase in the masked area
neodymium.visualassertion.mark.blocksize.x=10
neodymium.visualassertion.mark.blocksize.y=10

## How the marking should look like - marking type
# box: Draw a box with blocksize, the difference box might not be in the center, it is effectively 
#      the comparison box used in the algorithm.
# marker: Use yellow highlighter and mark different pixels in red too
neodymium.visualassertion.mark.type=marker

# The algorithm used for the determination of layout differences.
# 
# FUZZY: Uses color and pixel difference thresholds that determine when the difference in 
#        a block of pixels is a error. First the difference in color between each pixel in a block
#        is checked, if the number of pixels, for which the color difference is too high,
#        exceeds the number limit in one block, those differences are seen as error and marked. 
# 
# COLORFUZZY: Only uses a color threshold to determine a layout error. One detected difference will 
#             fail the test. Based on a comparison algorithm from http://www.compuphase.com/cmetric.htm . 
#             The algorithm is based on experiments with people, not theoretics.
# EXACT: Does not use any thresholds, checks for exact pixel by pixel match
neodymium.visualassertion.algorithm=FUZZY

# Color threshold for COLORFUZZY and FUZZY. Takes a value between 0 and 1 that stands for the 
# color difference in percent between two pixels. 0 is equal to an exact pixel by pixel comparison, where
# no difference is allowed.
neodymium.visualassertion.tolerance.colors=0.1

# Number of pixel differences threshold for FUZZY in one comparison block. Takes a value between 0 and 1 that 
# stands for the percentage of different pixels in one block. 0 is equal to an exact pixel by pixel comparison.
# 0.1 would mean that 10% of pixels can be different. 
neodymium.visualassertion.tolerance.pixels=0.1

# The side length of one comparison block for the FUZZY algorithm. Takes integer values that stand for the number of 
# pixels per side. The values provide a way to tolerate shifts of small objects, especially text. The values divide the image 
# into squares with a width=height=value. -> Block = xy * xy
neodymium.visualassertion.fuzzy.blocksize.xy=10

# Flag whether a image shall be created, which displays the found differences in grayscale on a black background
neodymium.visualassertion.onFailure.createDifferenceImage=true

# Flag whether the training mode of the image mask is enabled. While in training mode the module saves found differences
# in a mask, which can be used to train the algorithms to ignore valid dynamic content changes in the images. Additional training
# runs adjust the mask further. 
neodymium.visualassertion.trainingsMode=true

# Flag whether the masked area shall be increased to better mask content changes that are valid
neodymium.visualassertion.mask.close=false

# Size of the masking area when a pixel is found to be different when in training mode. Image this as a black stamp in 
# this size. The middle of the stamp is where the difference pixel is, so you get a nice area around it marked to be ignored as
# well.
neodymium.visualassertion.mask.close.width=10
neodymium.visualassertion.mask.close.height=10

